// Filtering a list using streams
List<String> languages = Arrays.asList("Java", "Python", "JavaScript", "C#", "Ruby");
List<String> filteredLanguages = languages.stream()
                                         .filter(lang -> lang.length() > 4)
                                         .collect(Collectors.toList());
System.out.println(filteredLanguages);

// Mapping with streams
List<String> upperCaseLanguages = languages.stream()
                                          .map(String::toUpperCase)
                                          .collect(Collectors.toList());
System.out.println(upperCaseLanguages);


// Simple example of a lambda expression
Runnable runnable = () -> System.out.println("Hello, Lambda!");
runnable.run();

// Using lambda expression with functional interface
interface MathOperation {
    int operate(int a, int b);
}
MathOperation addition = (a, b) -> a + b;
System.out.println("5 + 3 = " + addition.operate(5, 3));
